{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\Formations\\\\react-projects\\\\markdown-app\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { Component } from 'react'; // ! import the React Component functionnalites from the react library \n\nimport marked from 'marked'; // ! import the functionnalities of the marked library\n\nimport { sampleText } from './sampleText'; // ! import the sample text from the sampleText js file \n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      text: sampleText\n    };\n\n    this.handleChange = event => {\n      const text = event.target.value;\n      this.setState({\n        text\n      }); // ! then update the state with the actual textArea value\n    };\n\n    this.renderText = text => {\n      const __html = marked(text, {\n        sanitize: true\n      });\n\n      return {\n        __html\n      }; // ! then return the result of this function\n    };\n  }\n\n  // ! When the component is Mounted, get the text into the localStorage, children of the 'text' key\n  componentDidMount() {\n    const text = localStorage.getItem('text'); // ! while all the text is not deleted, display what lefts, else display back the sampleText text\n\n    if (text) {\n      this.setState({\n        text\n      });\n    } else {\n      this.setState({\n        text: sampleText\n      });\n    }\n  } // ! for each update of the component, store the text content with the 'text' key, into the localStorage\n\n\n  componentDidUpdate() {\n    const {\n      text\n    } = this.state;\n    localStorage.setItem('text', text);\n  } // ! event is the argument to replace on the function execution\n  // ! the text variable should be equal to the value(value) of the textArea(target) we want to get\n  // ! handleChange is related to the onChange (event) on line 54\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      onChange: this.handleChange // ? everytime something changes into the textarea, trigger the handleChange function\n      ,\n      value: this.state.text // ? the value is the sampleText\n      ,\n      className: \"form-control\",\n      rows: \"35\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      dangerouslySetInnerHTML: this.renderText(this.state.text),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }), \"// ? dangerous... is a keyword that talks by itself. trigger the renderText function, then replace // ? 'text' argument by 'this.state.text'\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/Formations/react-projects/markdown-app/src/App.js"],"names":["React","Component","marked","sampleText","App","state","text","handleChange","event","target","value","setState","renderText","__html","sanitize","componentDidMount","localStorage","getItem","componentDidUpdate","setItem","render"],"mappings":";AAAA,OAAO,WAAP;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,cAA3B,C,CAEA;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AACNC,MAAAA,IAAI,EAAEH;AADA,KADkB;;AAAA,SAyB1BI,YAzB0B,GAyBXC,KAAK,IAAI;AACtB,YAAMF,IAAI,GAAGE,KAAK,CAACC,MAAN,CAAaC,KAA1B;AACA,WAAKC,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd,EAFsB,CAGtB;AACD,KA7ByB;;AAAA,SAiC1BM,UAjC0B,GAiCbN,IAAI,IAAI;AACnB,YAAMO,MAAM,GAAGX,MAAM,CAACI,IAAD,EAAO;AAAEQ,QAAAA,QAAQ,EAAE;AAAZ,OAAP,CAArB;;AACA,aAAO;AAAED,QAAAA;AAAF,OAAP,CAFmB,CAGnB;AACD,KArCyB;AAAA;;AAK1B;AACAE,EAAAA,iBAAiB,GAAG;AAClB,UAAMT,IAAI,GAAGU,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb,CADkB,CAGlB;;AACA,QAAIX,IAAJ,EAAU;AACR,WAAKK,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd;AACD,KAFD,MAEO;AACL,WAAKK,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAEH;AAAR,OAAd;AACD;AACF,GAfyB,CAiB1B;;;AACAe,EAAAA,kBAAkB,GAAG;AACnB,UAAM;AAAEZ,MAAAA;AAAF,QAAW,KAAKD,KAAtB;AACAW,IAAAA,YAAY,CAACG,OAAb,CAAqB,MAArB,EAA6Bb,IAA7B;AACD,GArByB,CAsB1B;AACA;AACA;;;AAeAc,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,QAAQ,EAAE,KAAKb,YADjB,CAEE;AAFF;AAGE,MAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,IAHpB,CAIE;AAJF;AAKE,MAAA,SAAS,EAAC,cALZ;AAME,MAAA,IAAI,EAAC,IANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAYE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,uBAAuB,EAAE,KAAKM,UAAL,CAAgB,KAAKP,KAAL,CAAWC,IAA3B,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,iJAZF,CADF,CADF;AAsBD;;AA9DyB;;AAgE5B,eAAeF,GAAf","sourcesContent":["import './App.css';\n\nimport React, { Component } from 'react';\n\n// ! import the React Component functionnalites from the react library \nimport marked from 'marked';\n\n// ! import the functionnalities of the marked library\nimport { sampleText } from './sampleText';\n\n// ! import the sample text from the sampleText js file \n\nclass App extends Component {\n  state = {\n    text: sampleText\n  }\n\n  // ! When the component is Mounted, get the text into the localStorage, children of the 'text' key\n  componentDidMount() {\n    const text = localStorage.getItem('text')\n\n    // ! while all the text is not deleted, display what lefts, else display back the sampleText text\n    if (text) {\n      this.setState({ text })\n    } else {\n      this.setState({ text: sampleText })\n    }\n  }\n\n  // ! for each update of the component, store the text content with the 'text' key, into the localStorage\n  componentDidUpdate() {\n    const { text } = this.state\n    localStorage.setItem('text', text)\n  }\n  // ! event is the argument to replace on the function execution\n  // ! the text variable should be equal to the value(value) of the textArea(target) we want to get\n  // ! handleChange is related to the onChange (event) on line 54\n  handleChange = event => {\n    const text = event.target.value\n    this.setState({ text })\n    // ! then update the state with the actual textArea value\n  }\n\n  // ! use the marked library to return the html form of the text with the sanitize option \n  // ! (no code injection while translating)\n  renderText = text => {\n    const __html = marked(text, { sanitize: true })\n    return { __html }\n    // ! then return the result of this function\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <textarea\n              onChange={this.handleChange}\n              // ? everytime something changes into the textarea, trigger the handleChange function\n              value={this.state.text}\n              // ? the value is the sampleText\n              className=\"form-control\"\n              rows=\"35\">\n\n            </textarea>\n          </div>\n          <div className=\"col-sm-6\">\n            <div dangerouslySetInnerHTML={this.renderText(this.state.text)}></div>\n            // ? dangerous... is a keyword that talks by itself. trigger the renderText function, then replace\n            // ? 'text' argument by 'this.state.text'\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}